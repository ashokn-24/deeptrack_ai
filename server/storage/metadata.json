[
  {
    "id": "ml-ext-chunk-0",
    "index": 0,
    "title": "NoSQL",
    "url": "https://en.wikipedia.org/wiki/NoSQL",
    "text": "From Wikipedia, the free encyclopedia\n\t\t\t\t\t\n\"Structured storage\" redirects here. For the Microsoft technology, see COM Structured Storage.\nNoSQL (originally meaning \"Not only SQL\" or \"non-relational\")[1] refers to a type of database design that stores and retrieves data differently from the traditional table-based structure of relational databases. Unlike relational databases, which organize data into rows and columns like a spreadsheet, NoSQL databases use a single data structure\u2014such as key\u2013value pairs, wide columns, graphs, or documents\u2014to hold information. Since this non-relational design does not require a fixed schema, it scales easily to manage large, often unstructured datasets.[2] NoSQL systems are sometimes called \"Not only SQL\" because they can support SQL-like query languages or work alongside SQL databases in polyglot-persistent setups, where multiple database types are combined.[3][4] Non-relational databases date back to the late 1960s, but the term \"NoSQL\" emerged in the early 2000s, spurred by the needs of Web 2.0 companies like social media platforms.[5][6]\nNoSQL databases are popular in big data and real-time web applications due to their simple design, ability to scale across clusters of machines (called horizontal scaling), and precise control over data availability.[7][8] These structures can speed up certain tasks and are often considered more adaptable than fixed database tables.[9] However, many NoSQL systems prioritize speed and availability over strict consistency (per the CAP theorem), using eventual consistency\u2014where updates reach all nodes eventually, typically within milliseconds, but may cause brief delays in accessing the latest data, known as stale reads.[10] While most lack full ACID transaction support, some, like MongoDB, include it as a key feature.[11]\n\n\nBarriers to adoption[edit]\nBarriers to wider NoSQL adoption include their use of low-level query languages instead of SQL, inability to perform ad hoc joins across tables, lack of standardized interfaces, and significant investments already made in relational databases.[12] Some NoSQL systems risk losing data through lost writes or other forms, though features like write-ahead logging\u2014a method to record changes before they\u2019re applied\u2014can help prevent this.[13][14] For distributed transaction processing across multiple databases, keeping data consistent is a challenge for both NoSQL and relational systems, as relational databases cannot enforce rules linking separate databases, and few systems support both ACID transactions and X/Open XA standards for managing distributed updates.[15][16] Limitations within the interface environment are overcome using semantic virtualization protocols, such that NoSQL services are accessible to most operating systems.[17]\n\n\nThe term NoSQL was used by Carlo Strozzi in 1998 to name his lightweight Strozzi NoSQL open-source relational database that did not expose the standard Structured Query Language (SQL) interface, but was still relational.[18] His NoSQL RDBMS is distinct from the around-2009 general concept of NoSQL databases.  Strozzi suggests that, because the current NoSQL movement \"departs from the relational model altogether, it should therefore have been called more appropriately 'NoREL'\",[19] referring to \"not relational\".\nJohan Oskarsson, then a developer at Last.fm, reintroduced the term NoSQL in early 2009 when he organized an event to discuss \"open-source distributed, non-relational databases\".[20] The name attempted to label the emergence of an increasing number of non-relational, distributed data stores, including open source clones of Google's Bigtable/MapReduce and Amazon's DynamoDB.\n\n\nThere are various ways to classify NoSQL databases, with different categories and subcategories, some of which overlap. What follows is a non-exhaustive classification by data model, with examples:[21]\n\n\n\n\nType\nNotable examples of this type\n\n\nKey\u2013value cache\nApache Ignite, Couchbase, Coherence, eXtreme Scale, Hazelcast, Infinispan, Memcached, Redis, Velocity\n\n\nKey\u2013value store\nAzure Cosmos DB, ArangoDB, Amazon DynamoDB, Aerospike, Couchbase, ScyllaDB\n\n\nKey\u2013value store (eventually consistent)\nAzure Cosmos DB, Oracle NoSQL Database, Riak, Voldemort\n\n\nKey\u2013value store (ordered)\nFoundationDB, InfinityDB, LMDB, MemcacheDB\n\n\nTuple store\nApache River, GigaSpaces, Tarantool, TIBCO ActiveSpaces, OpenLink Virtuoso\n\n\nTriplestore\n\nAllegroGraph, MarkLogic, Ontotext-OWLIM, Oracle NoSQL database, Profium Sense, Virtuoso Universal Server\n\n\nObject database\nObjectivity/DB, Perst, ZODB, db4o, GemStone/S, InterSystems Cach\u00e9, JADE, ObjectDatabase++, ObjectDB, ObjectStore, ODABA, Realm, OpenLink Virtuoso, Versant Object Database, Indexed Database API\n\n\nDocument store\nAzure Cosmos DB, ArangoDB, BaseX, Clusterpoint, Couchbase, CouchDB, DocumentDB, eXist-db, Google Cloud Firestore, IBM Domino, MarkLogic, MongoDB, RavenDB, Qizx, RethinkDB, Elasticsearch, OrientDB\n\n\nWide-column store\nAzure Cosmos DB, Amazon DynamoDB, Bigtable, Cassandra, Google Cloud Datastore, HBase, Hypertable, ScyllaDB\n\n\nNative multi-model database\nArangoDB, Azure Cosmos DB, OrientDB, MarkLogic, Apache Ignite,[22][23] Couchbase, FoundationDB, Oracle Database, AgensGraph\n\n\nGraph database\n\nAzure Cosmos DB, AllegroGraph, ArangoDB, Apache Giraph, GUN (Graph Universe Node), InfiniteGraph,  MarkLogic, Neo4J, OrientDB, Virtuoso\n\n\nMultivalue database\n\nD3 Pick database, Extensible Storage Engine (ESE/NT), InfinityDB, InterSystems Cach\u00e9, jBASE Pick database, mvBase Rocket Software, mvEnterprise Rocket Software, Northgate Information Solutions Reality (the original Pick/MV Database), OpenQM, Revelation Software's OpenInsight (Windows) and Advanced Revelation (DOS), UniData Rocket U2, UniVerse Rocket U2\n\n\n\nKey\u2013value (KV) stores use the associative array (also called a map or dictionary) as their fundamental data model. In this model, data is represented as a collection of key\u2013value pairs, such that each possible key appears at most once in the collection.[24][25]\nThe key\u2013value model is one of the simplest non-trivial data models, and richer data models are often implemented as an extension of it. The key\u2013value model can be extended to a discretely ordered model that maintains keys in lexicographic order. This extension is computationally powerful, in that it can efficiently retrieve selective key ranges.[26]\nKey\u2013value stores can use consistency models ranging from eventual consistency to serializability. Some databases support ordering of keys. There are various hardware implementations, and some users store data in memory (RAM), while others on solid-state drives (SSD) or rotating disks (aka hard disk drive (HDD)).\n\n\n\nThe central concept of a document store is that of a \"document\". While the details of this definition differ among document-oriented databases, they all assume that documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include XML, YAML, and JSON and binary forms like BSON. Documents are addressed in the database via a unique key that represents that document. Another defining characteristic of a document-oriented database is an API or query language to retrieve documents based on their contents.\nDifferent implementations offer different ways of organizing and/or grouping documents:\n\nCollections\nTags\nNon-visible metadata\nDirectory hierarchies\nCompared to relational databases, collections could be considered analogous to tables and documents analogous to records. But they are different \u2013 every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different.\n\n\n\nGraph databases are designed for data whose relations are well represented as a graph consisting of elements connected by a finite number of relations. Examples of data include social relations, public transport links, road maps, network topologies, etc.\n\nGraph databases and their query language\n\n\nName\nLanguage(s)\nNotes\n\n\nAgensGraph\nCypher\nMulti-model graph database\n\n\nAllegroGraph\nSPARQL\nRDF triple store\n\n\nAmazon Neptune\nGremlin, SPARQL\nGraph database\n\n\nArangoDB\nAQL, JavaScript, GraphQL\nMulti-model DBMS Document, Graph database and Key-value store\n\n\nAzure Cosmos DB\nGremlin\nGraph database\n\n\nDEX/Sparksee\nC++, Java, C#, Python\nGraph database\n\n\nFlockDB\nScala\nGraph database\n\n\nGUN (Graph Universe Node)\nJavaScript\nGraph database\n\n\nIBM Db2\nSPARQL\nRDF triple store added in DB2 10\n\n\nInfiniteGraph\nJava\nGraph database\n\n\nJanusGraph\nJava\nGraph database\n\n\nMarkLogic\nJava, JavaScript, SPARQL, XQuery\nMulti-model document database and RDF triple store\n\n\nNeo4j\nCypher\nGraph database\n\n\nOpenLink Virtuoso\nC++, C#, Java, SPARQL\nMiddleware and database engine hybrid\n\n\nOracle\nSPARQL 1.1\nRDF triple store added in 11g\n\n\nOrientDB\nJava, SQL\nMulti-model document and graph database\n\n\nOWLIM\nJava, SPARQL 1.1\nRDF triple store\n\n\nProfium Sense\nJava, SPARQL\nRDF triple store\n\n\nRedisGraph\nCypher\nGraph database\n\n\nSqrrl Enterprise\nJava\nGraph database\n\n\nTerminusDB\n\nJavaScript, Python, datalog\n\nOpen source RDF triple-store and document store[27]\n\n\nThe performance of NoSQL databases is usually evaluated using the metric of throughput, which is measured as operations per second. Performance evaluation must pay attention to the right benchmarks such as production configurations, parameters of the databases, anticipated data volume, and concurrent user workloads.\nBen Scofield rated different categories of NoSQL databases as follows:[28]\n\n\n\nData model\nPerformance\nScalability\nFlexibility\nComplexity\nData integrity\nFunctionality\n\n\nKey\u2013value store\nhigh\nhigh\nhigh\nnone\nlow\nvariable (none)\n\n\nColumn-oriented store\nhigh\nhigh\nmoderate\nlow\nlow\nminimal\n\n\nDocument-oriented store\nhigh\nvariable (high)\nhigh\nlow\nlow\nvariable (low)\n\n\nGraph database\nvariable\nvariable\nhigh\nhigh\nlow-med\ngraph theory\n\n\nRelational database\nvariable\nvariable\nlow\nmoderate\nhigh\nrelational algebra\n\nPerformance and scalability comparisons are most commonly done using the YCSB benchmark.\n\nHandling relational data[edit]\nSince most NoSQL databases lack ability for joins in queries, the database schema generally needs to be designed differently. There are three main techniques for handling relational data in a NoSQL database. (See table join and ACID support for NoSQL databases that support joins.)\n\n\nInstead of retrieving all the data with one query, it is common to do several queries to get the desired data. NoSQL queries are often faster than traditional SQL queries, so the cost of additional queries may be acceptable. If an excessive number of queries would be necessary, one of the other two approaches is more appropriate.\n\nCaching, replication and non-normalized data[edit]\nInstead of only storing foreign keys, it is common to store actual foreign values along with the model's data. For example, each blog comment might include the username in addition to a user id, thus providing easy access to the username without requiring another lookup. When a username changes, however, this will now need to be changed in many places in the database. Thus this approach works better when reads are much more common than writes.[29]\n\n\nWith document databases like MongoDB it is common to put more data in a smaller number of collections. For example, in a blogging application, one might choose to store comments within the blog post document, so that with a single retrieval one gets all the comments. Thus in this approach a single document contains all the data needed for a specific task.\n\nACID and join support[edit]\nA database is marked as supporting ACID properties (atomicity, consistency, isolation, durability) or join operations if the documentation for the database makes that claim. However, this doesn't necessarily mean that the capability is fully supported in a manner similar to most SQL databases.\n\n\n\nDatabase\nACID\nJoins\n\n\nAerospike\nYes\nNo\n\n\nAgensGraph\nYes\nYes\n\n\nApache Ignite\nYes\nYes\n\n\nArangoDB\nYes\nYes\n\n\nAmazon DynamoDB\nYes\nNo\n\n\nCouchbase\nYes\nYes\n\n\nCouchDB\nYes\nYes\n\n\nIBM Db2\nYes\nYes\n\n\nInfinityDB\nYes\nNo\n\n\nLMDB\nYes\nNo\n\n\nMarkLogic\nYes\nYes[nb 1]\n\n\nMongoDB\nYes\nYes[nb 2]\n\n\nOrientDB\nYes\nYes[nb 3]\n\n\n^ Joins do not necessarily apply to document databases, but MarkLogic can do joins using semantics.[30]\n\n^ MongoDB did not support joining from a sharded collection until version 5.1.[31]\n\n^ OrientDB can resolve 1:1 joins using links by storing direct links to foreign records.[32]\n\n\nQuery optimization and indexing in NoSQL databases[edit]\nDifferent NoSQL databases, such as DynamoDB, MongoDB, Cassandra, Couchbase, HBase, and Redis, exhibit varying behaviors when querying non-indexed fields. Many perform full-table or collection scans for such queries, applying filtering operations after retrieving data. However, modern NoSQL databases often incorporate advanced features to optimize query performance. For example, MongoDB supports compound indexes and query-optimization strategies, Cassandra offers secondary indexes and materialized views, and Redis employs custom indexing mechanisms tailored to specific use cases. Systems like Elasticsearch use inverted indexes for efficient text-based searches, but they can still require full scans for non-indexed fields. This behavior reflects the design focus of many NoSQL systems on scalability and efficient key-based operations rather than optimized querying for arbitrary fields. Consequently, while these databases excel at basic CRUD operations and key-based lookups, their suitability for complex queries involving joins or non-indexed filtering varies depending on the database type\u2014document, key\u2013value, wide-column, or graph\u2014and the specific implementation. [33]\n\n\nCAP theorem\nComparison of object database management systems\nComparison of structured storage software\nDatabase scalability\nDistributed cache\nFaceted search\nMultiValue database\nMulti-model database\nSchema-agnostic databases\nTriplestore\nVector database\n\n\n\n^ http://nosql-database.org/ \"NoSQL DEFINITION: Next Generation Databases mostly addressing some of the points\u00a0: being non-relational, distributed, open-source and horizontally scalable\".\n\n^ \"What Is a NoSQL Database? | IBM\". www.ibm.com. 12 December 2022. Retrieved 9 August 2024.\n\n^ \"NoSQL (Not Only SQL)\". NoSQL database, also called Not Only SQL\n\n^ Fowler, Martin. \"NosqlDefinition\". many advocates of NoSQL say that it does not mean a \"no\" to SQL, rather it means Not Only SQL\n\n^ Mohan, C. (2013). History Repeats Itself: Sensible and NonsenSQL Aspects of the NoSQL Hoopla (PDF). Proc. 16th Int'l Conf. on Extending Database Technology.\n\n^ \"Amazon Goes Back to the Future With 'NoSQL' Database\". WIRED. 19 January 2012. Retrieved 6 March 2017.\n\n^ Leavitt, Neal (2010). \"Will NoSQL Databases Live Up to Their Promise?\" (PDF). IEEE Computer. 43 (2): 12\u201314. doi:10.1109/MC.2010.58. S2CID\u00a026876882.\n\n^ \"RDBMS dominate the database market, but NoSQL systems are catching up\". DB-Engines.com. 21 November 2013. Retrieved 24 November 2013.\n\n^ Vogels, Werner (18 January 2012). \"Amazon DynamoDB \u2013 a Fast and Scalable NoSQL Database Service Designed for Internet Scale Applications\". All Things Distributed. Retrieved 6 March 2017.\n\n^ \"Jepsen: MongoDB stale reads\". Aphyr.com. 20 April 2015. Retrieved 6 March 2017.\n\n^ \"MongoDB ACID Transactions\". GeeksforGeeks. 12 March 2024. Retrieved 25 October 2024.\n\n^ Grolinger, K.; Higashino, W. A.; Tiwari, A.; Capretz, M. A. M. (2013). \"Data management in cloud environments: NoSQL and NewSQL data stores\" (PDF). Aira, Springer. Retrieved 8 January 2014.\n\n^ \"Large volume data analysis on the Typesafe Reactive Platform\". Slideshare.net. 11 June 2015. Retrieved 6 March 2017.\n\n^ Fowler, Adam. \"10 NoSQL Misconceptions\". Dummies.com. Retrieved 6 March 2017.\n\n^ \"No! to SQL and No! to NoSQL\". Iggyfernandez.wordpress.com. 29 July 2013. Retrieved 6 March 2017.\n\n^ Chapple, Mike. \"The ACID Model\". about.com. Archived from the original on 29 December 2016. Retrieved 26 September 2012.\n\n^ Lawrence, Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB (2014). \"Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB\". International Conference on Computational Science and Computational Intelligence 1.\n\n^ Lith, Adam; Mattson, Jakob (2010). \"Investigating storage solutions for large data: A comparison of well performing and scalable data storage solutions for real time extraction and batch insertion of data\" (PDF). G\u00f6teborg: Department of Computer Science and Engineering, Chalmers University of Technology. p.\u00a070. Retrieved 12 May 2011. Carlo Strozzi first used the term NoSQL in 1998 as a name for his open source relational database that did not offer a SQL interface[...]\n\n^ \"NoSQL Relational Database Management System: Home Page\". Strozzi.it. 2 October 2007. Retrieved 29 March 2010.\n\n^ \"NoSQL 2009\". Blog.sym-link.com. 12 May 2009. Archived from the original on 16 July 2011. Retrieved 29 March 2010.\n\n^ Strauch, Christof. \"NoSQL Databases\" (PDF). pp.\u00a023\u201324. Retrieved 27 August 2017.\n\n^ https://apacheignite.readme.io/docs Ignite Documentation\n\n^ https://www.infoworld.com/article/3135070/data-center/fire-up-big-data-processing-with-apache-ignite.html fire-up-big-data-processing-with-apache-ignite\n\n^ Sandy (14 January 2011). \"Key Value stores and the NoSQL movement\". Stackexchange. Retrieved 1 January 2012. Key\u2013value stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered the value in the \"key\u2013value\" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the key-value store. This structure replaces the need for a fixed data model and allows proper formatting.\n\n^ Seeger, Marc (21 September 2009). \"Key-Value Stores: a practical overview\" (PDF). Marc Seeger. Retrieved 1 January 2012. Key\u2013value stores provide a high-performance alternative to relational database systems with respect to storing and accessing data. This paper provides a short overview of some of the currently available key\u2013value stores and their interface to the Ruby programming language.\n\n^ Katsov, Ilya (1 March 2012). \"NoSQL Data Modeling Techniques\". Ilya Katsov. Retrieved 8 May 2014.\n\n^ \"TerminusDB an open-source in-memory document graph database\". terminusdb.com. Retrieved 16 December 2021.\n\n^ Scofield, Ben (14 January 2010). \"NoSQL - Death to Relational Databases(?)\". Retrieved 26 June 2014.\n\n^ \n\"Moving From Relational to NoSQL: How to Get Started\". Couchbase.com. Retrieved 11 November 2019.\n\n^ \"Can't do joins with MarkLogic? It's just a matter of Semantics! - General Networks\". Gennet.com. Archived from the original on 3 March 2017. Retrieved 6 March 2017.\n\n^ \"Sharded Collection Restrictions\". docs.mongodb.com. Retrieved 24 January 2020.\n\n^ \"SQL Reference \u00b7 OrientDB Manual\". OrientDB.com. Retrieved 24 January 2020.\n\n^ Sullivan, Dan. NoSQL for Mere Mortals. ISBN\u00a0978-0134023212.\n\n\n\nSadalage, Pramod; Fowler, Martin (2012). NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley. ISBN\u00a0978-0-321-82662-6.\nMcCreary, Dan; Kelly, Ann (2013). Making Sense of NoSQL: A guide for managers and the rest of us. Manning. ISBN\u00a09781617291074.\nWiese, Lena (2015). Advanced Data Management for SQL, NoSQL, Cloud and Distributed Databases. DeGruyter/Oldenbourg. ISBN\u00a0978-3-11-044140-6.\nStrauch, Christof (2012). \"NoSQL Databases\" (PDF).\nMoniruzzaman, A. B.; Hossain, S. A. (2013). \"NoSQL Database: New Era of Databases for Big data Analytics - Classification, Characteristics and Comparison\". arXiv:1307.0191 [cs.DB].\nOrend, Kai (2013). \"Analysis and Classification of NoSQL Databases and Evaluation of their Ability to Replace an Object-relational Persistence Layer\". CiteSeerX\u00a010.1.1.184.483.\nKrishnan, Ganesh; Kulkarni, Sarang; Dadbhawala, Dharmesh Kirit. \"Method and system for versioned sharing, consolidating and reporting information\".\n\nStrauch, Christof. \"NoSQL whitepaper\" (PDF). Stuttgart: Hochschule der Medien.\nEdlich, Stefan. \"NoSQL database List\".\nNeubauer, Peter (2010). \"Graph Databases, NOSQL and Neo4j\".\nBushik, Sergey (2012). \"A vendor-independent comparison of NoSQL databases: Cassandra, HBase, MongoDB, Riak\". NetworkWorld.\nZicari, Roberto V. (2014). \"NoSQL Data Stores \u2013 Articles, Papers, Presentations\". odbms.org."
  },
  {
    "id": "ml-ext-chunk-1",
    "index": 1,
    "title": "NoSQL",
    "url": "https://en.wikipedia.org/wiki/NoSQL",
    "text": "\"Structured storage\" redirects here. For the Microsoft technology, see COM Structured Storage.\nNoSQL (originally meaning \"Not only SQL\" or \"non-relational\")[1] refers to a type of database design that stores and retrieves data differently from the traditional table-based structure of relational databases. Unlike relational databases, which organize data into rows and columns like a spreadsheet, NoSQL databases use a single data structure\u2014such as key\u2013value pairs, wide columns, graphs, or documents\u2014to hold information. Since this non-relational design does not require a fixed schema, it scales easily to manage large, often unstructured datasets.[2] NoSQL systems are sometimes called \"Not only SQL\" because they can support SQL-like query languages or work alongside SQL databases in polyglot-persistent setups, where multiple database types are combined.[3][4] Non-relational databases date back to the late 1960s, but the term \"NoSQL\" emerged in the early 2000s, spurred by the needs of Web 2.0 companies like social media platforms.[5][6]\nNoSQL databases are popular in big data and real-time web applications due to their simple design, ability to scale across clusters of machines (called horizontal scaling), and precise control over data availability.[7][8] These structures can speed up certain tasks and are often considered more adaptable than fixed database tables.[9] However, many NoSQL systems prioritize speed and availability over strict consistency (per the CAP theorem), using eventual consistency\u2014where updates reach all nodes eventually, typically within milliseconds, but may cause brief delays in accessing the latest data, known as stale reads.[10] While most lack full ACID transaction support, some, like MongoDB, include it as a key feature.[11]\n\n\nBarriers to adoption[edit]\nBarriers to wider NoSQL adoption include their use of low-level query languages instead of SQL, inability to perform ad hoc joins across tables, lack of standardized interfaces, and significant investments already made in relational databases.[12] Some NoSQL systems risk losing data through lost writes or other forms, though features like write-ahead logging\u2014a method to record changes before they\u2019re applied\u2014can help prevent this.[13][14] For distributed transaction processing across multiple databases, keeping data consistent is a challenge for both NoSQL and relational systems, as relational databases cannot enforce rules linking separate databases, and few systems support both ACID transactions and X/Open XA standards for managing distributed updates.[15][16] Limitations within the interface environment are overcome using semantic virtualization protocols, such that NoSQL services are accessible to most operating systems.[17]\n\n\nThe term NoSQL was used by Carlo Strozzi in 1998 to name his lightweight Strozzi NoSQL open-source relational database that did not expose the standard Structured Query Language (SQL) interface, but was still relational.[18] His NoSQL RDBMS is distinct from the around-2009 general concept of NoSQL databases.  Strozzi suggests that, because the current NoSQL movement \"departs from the relational model altogether, it should therefore have been called more appropriately 'NoREL'\",[19] referring to \"not relational\".\nJohan Oskarsson, then a developer at Last.fm, reintroduced the term NoSQL in early 2009 when he organized an event to discuss \"open-source distributed, non-relational databases\".[20] The name attempted to label the emergence of an increasing number of non-relational, distributed data stores, including open source clones of Google's Bigtable/MapReduce and Amazon's DynamoDB.\n\n\nThere are various ways to classify NoSQL databases, with different categories and subcategories, some of which overlap. What follows is a non-exhaustive classification by data model, with examples:[21]\n\n\n\n\nType\nNotable examples of this type\n\n\nKey\u2013value cache\nApache Ignite, Couchbase, Coherence, eXtreme Scale, Hazelcast, Infinispan, Memcached, Redis, Velocity\n\n\nKey\u2013value store\nAzure Cosmos DB, ArangoDB, Amazon DynamoDB, Aerospike, Couchbase, ScyllaDB\n\n\nKey\u2013value store (eventually consistent)\nAzure Cosmos DB, Oracle NoSQL Database, Riak, Voldemort\n\n\nKey\u2013value store (ordered)\nFoundationDB, InfinityDB, LMDB, MemcacheDB\n\n\nTuple store\nApache River, GigaSpaces, Tarantool, TIBCO ActiveSpaces, OpenLink Virtuoso\n\n\nTriplestore\n\nAllegroGraph, MarkLogic, Ontotext-OWLIM, Oracle NoSQL database, Profium Sense, Virtuoso Universal Server\n\n\nObject database\nObjectivity/DB, Perst, ZODB, db4o, GemStone/S, InterSystems Cach\u00e9, JADE, ObjectDatabase++, ObjectDB, ObjectStore, ODABA, Realm, OpenLink Virtuoso, Versant Object Database, Indexed Database API\n\n\nDocument store\nAzure Cosmos DB, ArangoDB, BaseX, Clusterpoint, Couchbase, CouchDB, DocumentDB, eXist-db, Google Cloud Firestore, IBM Domino, MarkLogic, MongoDB, RavenDB, Qizx, RethinkDB, Elasticsearch, OrientDB\n\n\nWide-column store\nAzure Cosmos DB, Amazon DynamoDB, Bigtable, Cassandra, Google Cloud Datastore, HBase, Hypertable, ScyllaDB\n\n\nNative multi-model database\nArangoDB, Azure Cosmos DB, OrientDB, MarkLogic, Apache Ignite,[22][23] Couchbase, FoundationDB, Oracle Database, AgensGraph\n\n\nGraph database\n\nAzure Cosmos DB, AllegroGraph, ArangoDB, Apache Giraph, GUN (Graph Universe Node), InfiniteGraph,  MarkLogic, Neo4J, OrientDB, Virtuoso\n\n\nMultivalue database\n\nD3 Pick database, Extensible Storage Engine (ESE/NT), InfinityDB, InterSystems Cach\u00e9, jBASE Pick database, mvBase Rocket Software, mvEnterprise Rocket Software, Northgate Information Solutions Reality (the original Pick/MV Database), OpenQM, Revelation Software's OpenInsight (Windows) and Advanced Revelation (DOS), UniData Rocket U2, UniVerse Rocket U2\n\n\n\nKey\u2013value (KV) stores use the associative array (also called a map or dictionary) as their fundamental data model. In this model, data is represented as a collection of key\u2013value pairs, such that each possible key appears at most once in the collection.[24][25]\nThe key\u2013value model is one of the simplest non-trivial data models, and richer data models are often implemented as an extension of it. The key\u2013value model can be extended to a discretely ordered model that maintains keys in lexicographic order. This extension is computationally powerful, in that it can efficiently retrieve selective key ranges.[26]\nKey\u2013value stores can use consistency models ranging from eventual consistency to serializability. Some databases support ordering of keys. There are various hardware implementations, and some users store data in memory (RAM), while others on solid-state drives (SSD) or rotating disks (aka hard disk drive (HDD)).\n\n\n\nThe central concept of a document store is that of a \"document\". While the details of this definition differ among document-oriented databases, they all assume that documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include XML, YAML, and JSON and binary forms like BSON. Documents are addressed in the database via a unique key that represents that document. Another defining characteristic of a document-oriented database is an API or query language to retrieve documents based on their contents.\nDifferent implementations offer different ways of organizing and/or grouping documents:\n\nCollections\nTags\nNon-visible metadata\nDirectory hierarchies\nCompared to relational databases, collections could be considered analogous to tables and documents analogous to records. But they are different \u2013 every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different.\n\n\n\nGraph databases are designed for data whose relations are well represented as a graph consisting of elements connected by a finite number of relations. Examples of data include social relations, public transport links, road maps, network topologies, etc.\n\nGraph databases and their query language\n\n\nName\nLanguage(s)\nNotes\n\n\nAgensGraph\nCypher\nMulti-model graph database\n\n\nAllegroGraph\nSPARQL\nRDF triple store\n\n\nAmazon Neptune\nGremlin, SPARQL\nGraph database\n\n\nArangoDB\nAQL, JavaScript, GraphQL\nMulti-model DBMS Document, Graph database and Key-value store\n\n\nAzure Cosmos DB\nGremlin\nGraph database\n\n\nDEX/Sparksee\nC++, Java, C#, Python\nGraph database\n\n\nFlockDB\nScala\nGraph database\n\n\nGUN (Graph Universe Node)\nJavaScript\nGraph database\n\n\nIBM Db2\nSPARQL\nRDF triple store added in DB2 10\n\n\nInfiniteGraph\nJava\nGraph database\n\n\nJanusGraph\nJava\nGraph database\n\n\nMarkLogic\nJava, JavaScript, SPARQL, XQuery\nMulti-model document database and RDF triple store\n\n\nNeo4j\nCypher\nGraph database\n\n\nOpenLink Virtuoso\nC++, C#, Java, SPARQL\nMiddleware and database engine hybrid\n\n\nOracle\nSPARQL 1.1\nRDF triple store added in 11g\n\n\nOrientDB\nJava, SQL\nMulti-model document and graph database\n\n\nOWLIM\nJava, SPARQL 1.1\nRDF triple store\n\n\nProfium Sense\nJava, SPARQL\nRDF triple store\n\n\nRedisGraph\nCypher\nGraph database\n\n\nSqrrl Enterprise\nJava\nGraph database\n\n\nTerminusDB\n\nJavaScript, Python, datalog\n\nOpen source RDF triple-store and document store[27]\n\n\nThe performance of NoSQL databases is usually evaluated using the metric of throughput, which is measured as operations per second. Performance evaluation must pay attention to the right benchmarks such as production configurations, parameters of the databases, anticipated data volume, and concurrent user workloads.\nBen Scofield rated different categories of NoSQL databases as follows:[28]\n\n\n\nData model\nPerformance\nScalability\nFlexibility\nComplexity\nData integrity\nFunctionality\n\n\nKey\u2013value store\nhigh\nhigh\nhigh\nnone\nlow\nvariable (none)\n\n\nColumn-oriented store\nhigh\nhigh\nmoderate\nlow\nlow\nminimal\n\n\nDocument-oriented store\nhigh\nvariable (high)\nhigh\nlow\nlow\nvariable (low)\n\n\nGraph database\nvariable\nvariable\nhigh\nhigh\nlow-med\ngraph theory\n\n\nRelational database\nvariable\nvariable\nlow\nmoderate\nhigh\nrelational algebra\n\nPerformance and scalability comparisons are most commonly done using the YCSB benchmark.\n\nHandling relational data[edit]\nSince most NoSQL databases lack ability for joins in queries, the database schema generally needs to be designed differently. There are three main techniques for handling relational data in a NoSQL database. (See table join and ACID support for NoSQL databases that support joins.)\n\n\nInstead of retrieving all the data with one query, it is common to do several queries to get the desired data. NoSQL queries are often faster than traditional SQL queries, so the cost of additional queries may be acceptable. If an excessive number of queries would be necessary, one of the other two approaches is more appropriate.\n\nCaching, replication and non-normalized data[edit]\nInstead of only storing foreign keys, it is common to store actual foreign values along with the model's data. For example, each blog comment might include the username in addition to a user id, thus providing easy access to the username without requiring another lookup. When a username changes, however, this will now need to be changed in many places in the database. Thus this approach works better when reads are much more common than writes.[29]\n\n\nWith document databases like MongoDB it is common to put more data in a smaller number of collections. For example, in a blogging application, one might choose to store comments within the blog post document, so that with a single retrieval one gets all the comments. Thus in this approach a single document contains all the data needed for a specific task.\n\nACID and join support[edit]\nA database is marked as supporting ACID properties (atomicity, consistency, isolation, durability) or join operations if the documentation for the database makes that claim. However, this doesn't necessarily mean that the capability is fully supported in a manner similar to most SQL databases.\n\n\n\nDatabase\nACID\nJoins\n\n\nAerospike\nYes\nNo\n\n\nAgensGraph\nYes\nYes\n\n\nApache Ignite\nYes\nYes\n\n\nArangoDB\nYes\nYes\n\n\nAmazon DynamoDB\nYes\nNo\n\n\nCouchbase\nYes\nYes\n\n\nCouchDB\nYes\nYes\n\n\nIBM Db2\nYes\nYes\n\n\nInfinityDB\nYes\nNo\n\n\nLMDB\nYes\nNo\n\n\nMarkLogic\nYes\nYes[nb 1]\n\n\nMongoDB\nYes\nYes[nb 2]\n\n\nOrientDB\nYes\nYes[nb 3]\n\n\n^ Joins do not necessarily apply to document databases, but MarkLogic can do joins using semantics.[30]\n\n^ MongoDB did not support joining from a sharded collection until version 5.1.[31]\n\n^ OrientDB can resolve 1:1 joins using links by storing direct links to foreign records.[32]\n\n\nQuery optimization and indexing in NoSQL databases[edit]\nDifferent NoSQL databases, such as DynamoDB, MongoDB, Cassandra, Couchbase, HBase, and Redis, exhibit varying behaviors when querying non-indexed fields. Many perform full-table or collection scans for such queries, applying filtering operations after retrieving data. However, modern NoSQL databases often incorporate advanced features to optimize query performance. For example, MongoDB supports compound indexes and query-optimization strategies, Cassandra offers secondary indexes and materialized views, and Redis employs custom indexing mechanisms tailored to specific use cases. Systems like Elasticsearch use inverted indexes for efficient text-based searches, but they can still require full scans for non-indexed fields. This behavior reflects the design focus of many NoSQL systems on scalability and efficient key-based operations rather than optimized querying for arbitrary fields. Consequently, while these databases excel at basic CRUD operations and key-based lookups, their suitability for complex queries involving joins or non-indexed filtering varies depending on the database type\u2014document, key\u2013value, wide-column, or graph\u2014and the specific implementation. [33]\n\n\nCAP theorem\nComparison of object database management systems\nComparison of structured storage software\nDatabase scalability\nDistributed cache\nFaceted search\nMultiValue database\nMulti-model database\nSchema-agnostic databases\nTriplestore\nVector database\n\n\n\n^ http://nosql-database.org/ \"NoSQL DEFINITION: Next Generation Databases mostly addressing some of the points\u00a0: being non-relational, distributed, open-source and horizontally scalable\".\n\n^ \"What Is a NoSQL Database? | IBM\". www.ibm.com. 12 December 2022. Retrieved 9 August 2024.\n\n^ \"NoSQL (Not Only SQL)\". NoSQL database, also called Not Only SQL\n\n^ Fowler, Martin. \"NosqlDefinition\". many advocates of NoSQL say that it does not mean a \"no\" to SQL, rather it means Not Only SQL\n\n^ Mohan, C. (2013). History Repeats Itself: Sensible and NonsenSQL Aspects of the NoSQL Hoopla (PDF). Proc. 16th Int'l Conf. on Extending Database Technology.\n\n^ \"Amazon Goes Back to the Future With 'NoSQL' Database\". WIRED. 19 January 2012. Retrieved 6 March 2017.\n\n^ Leavitt, Neal (2010). \"Will NoSQL Databases Live Up to Their Promise?\" (PDF). IEEE Computer. 43 (2): 12\u201314. doi:10.1109/MC.2010.58. S2CID\u00a026876882.\n\n^ \"RDBMS dominate the database market, but NoSQL systems are catching up\". DB-Engines.com. 21 November 2013. Retrieved 24 November 2013.\n\n^ Vogels, Werner (18 January 2012). \"Amazon DynamoDB \u2013 a Fast and Scalable NoSQL Database Service Designed for Internet Scale Applications\". All Things Distributed. Retrieved 6 March 2017.\n\n^ \"Jepsen: MongoDB stale reads\". Aphyr.com. 20 April 2015. Retrieved 6 March 2017.\n\n^ \"MongoDB ACID Transactions\". GeeksforGeeks. 12 March 2024. Retrieved 25 October 2024.\n\n^ Grolinger, K.; Higashino, W. A.; Tiwari, A.; Capretz, M. A. M. (2013). \"Data management in cloud environments: NoSQL and NewSQL data stores\" (PDF). Aira, Springer. Retrieved 8 January 2014.\n\n^ \"Large volume data analysis on the Typesafe Reactive Platform\". Slideshare.net. 11 June 2015. Retrieved 6 March 2017.\n\n^ Fowler, Adam. \"10 NoSQL Misconceptions\". Dummies.com. Retrieved 6 March 2017.\n\n^ \"No! to SQL and No! to NoSQL\". Iggyfernandez.wordpress.com. 29 July 2013. Retrieved 6 March 2017.\n\n^ Chapple, Mike. \"The ACID Model\". about.com. Archived from the original on 29 December 2016. Retrieved 26 September 2012.\n\n^ Lawrence, Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB (2014). \"Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB\". International Conference on Computational Science and Computational Intelligence 1.\n\n^ Lith, Adam; Mattson, Jakob (2010). \"Investigating storage solutions for large data: A comparison of well performing and scalable data storage solutions for real time extraction and batch insertion of data\" (PDF). G\u00f6teborg: Department of Computer Science and Engineering, Chalmers University of Technology. p.\u00a070. Retrieved 12 May 2011. Carlo Strozzi first used the term NoSQL in 1998 as a name for his open source relational database that did not offer a SQL interface[...]\n\n^ \"NoSQL Relational Database Management System: Home Page\". Strozzi.it. 2 October 2007. Retrieved 29 March 2010.\n\n^ \"NoSQL 2009\". Blog.sym-link.com. 12 May 2009. Archived from the original on 16 July 2011. Retrieved 29 March 2010.\n\n^ Strauch, Christof. \"NoSQL Databases\" (PDF). pp.\u00a023\u201324. Retrieved 27 August 2017.\n\n^ https://apacheignite.readme.io/docs Ignite Documentation\n\n^ https://www.infoworld.com/article/3135070/data-center/fire-up-big-data-processing-with-apache-ignite.html fire-up-big-data-processing-with-apache-ignite\n\n^ Sandy (14 January 2011). \"Key Value stores and the NoSQL movement\". Stackexchange. Retrieved 1 January 2012. Key\u2013value stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered the value in the \"key\u2013value\" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the key-value store. This structure replaces the need for a fixed data model and allows proper formatting.\n\n^ Seeger, Marc (21 September 2009). \"Key-Value Stores: a practical overview\" (PDF). Marc Seeger. Retrieved 1 January 2012. Key\u2013value stores provide a high-performance alternative to relational database systems with respect to storing and accessing data. This paper provides a short overview of some of the currently available key\u2013value stores and their interface to the Ruby programming language.\n\n^ Katsov, Ilya (1 March 2012). \"NoSQL Data Modeling Techniques\". Ilya Katsov. Retrieved 8 May 2014.\n\n^ \"TerminusDB an open-source in-memory document graph database\". terminusdb.com. Retrieved 16 December 2021.\n\n^ Scofield, Ben (14 January 2010). \"NoSQL - Death to Relational Databases(?)\". Retrieved 26 June 2014.\n\n^ \n\"Moving From Relational to NoSQL: How to Get Started\". Couchbase.com. Retrieved 11 November 2019.\n\n^ \"Can't do joins with MarkLogic? It's just a matter of Semantics! - General Networks\". Gennet.com. Archived from the original on 3 March 2017. Retrieved 6 March 2017.\n\n^ \"Sharded Collection Restrictions\". docs.mongodb.com. Retrieved 24 January 2020.\n\n^ \"SQL Reference \u00b7 OrientDB Manual\". OrientDB.com. Retrieved 24 January 2020.\n\n^ Sullivan, Dan. NoSQL for Mere Mortals. ISBN\u00a0978-0134023212.\n\n\n\nSadalage, Pramod; Fowler, Martin (2012). NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley. ISBN\u00a0978-0-321-82662-6.\nMcCreary, Dan; Kelly, Ann (2013). Making Sense of NoSQL: A guide for managers and the rest of us. Manning. ISBN\u00a09781617291074.\nWiese, Lena (2015). Advanced Data Management for SQL, NoSQL, Cloud and Distributed Databases. DeGruyter/Oldenbourg. ISBN\u00a0978-3-11-044140-6.\nStrauch, Christof (2012). \"NoSQL Databases\" (PDF).\nMoniruzzaman, A. B.; Hossain, S. A. (2013). \"NoSQL Database: New Era of Databases for Big data Analytics - Classification, Characteristics and Comparison\". arXiv:1307.0191 [cs.DB].\nOrend, Kai (2013). \"Analysis and Classification of NoSQL Databases and Evaluation of their Ability to Replace an Object-relational Persistence Layer\". CiteSeerX\u00a010.1.1.184.483.\nKrishnan, Ganesh; Kulkarni, Sarang; Dadbhawala, Dharmesh Kirit. \"Method and system for versioned sharing, consolidating and reporting information\".\n\nStrauch, Christof. \"NoSQL whitepaper\" (PDF). Stuttgart: Hochschule der Medien.\nEdlich, Stefan. \"NoSQL database List\".\nNeubauer, Peter (2010). \"Graph Databases, NOSQL and Neo4j\".\nBushik, Sergey (2012). \"A vendor-independent comparison of NoSQL databases: Cassandra, HBase, MongoDB, Riak\". NetworkWorld.\nZicari, Roberto V. (2014). \"NoSQL Data Stores \u2013 Articles, Papers, Presentations\". odbms.org."
  },
  {
    "id": "ml-ext-chunk-0",
    "index": 0,
    "title": "NoSQL",
    "url": "https://en.wikipedia.org/wiki/NoSQL#ml-ext-chunk-1",
    "text": "From Wikipedia, the free encyclopedia\n\t\t\t\t\t\n\"Structured storage\" redirects here. For the Microsoft technology, see COM Structured Storage.\nNoSQL (originally meaning \"Not only SQL\" or \"non-relational\")[1] refers to a type of database design that stores and retrieves data differently from the traditional table-based structure of relational databases. Unlike relational databases, which organize data into rows and columns like a spreadsheet, NoSQL databases use a single data structure\u2014such as key\u2013value pairs, wide columns, graphs, or documents\u2014to hold information. Since this non-relational design does not require a fixed schema, it scales easily to manage large, often unstructured datasets.[2] NoSQL systems are sometimes called \"Not only SQL\" because they can support SQL-like query languages or work alongside SQL databases in polyglot-persistent setups, where multiple database types are combined.[3][4] Non-relational databases date back to the late 1960s, but the term \"NoSQL\" emerged in the early 2000s, spurred by the needs of Web 2.0 companies like social media platforms.[5][6]\nNoSQL databases are popular in big data and real-time web applications due to their simple design, ability to scale across clusters of machines (called horizontal scaling), and precise control over data availability.[7][8] These structures can speed up certain tasks and are often considered more adaptable than fixed database tables.[9] However, many NoSQL systems prioritize speed and availability over strict consistency (per the CAP theorem), using eventual consistency\u2014where updates reach all nodes eventually, typically within milliseconds, but may cause brief delays in accessing the latest data, known as stale reads.[10] While most lack full ACID transaction support, some, like MongoDB, include it as a key feature.[11]\n\n\nBarriers to adoption[edit]\nBarriers to wider NoSQL adoption include their use of low-level query languages instead of SQL, inability to perform ad hoc joins across tables, lack of standardized interfaces, and significant investments already made in relational databases.[12] Some NoSQL systems risk losing data through lost writes or other forms, though features like write-ahead logging\u2014a method to record changes before they\u2019re applied\u2014can help prevent this.[13][14] For distributed transaction processing across multiple databases, keeping data consistent is a challenge for both NoSQL and relational systems, as relational databases cannot enforce rules linking separate databases, and few systems support both ACID transactions and X/Open XA standards for managing distributed updates.[15][16] Limitations within the interface environment are overcome using semantic virtualization protocols, such that NoSQL services are accessible to most operating systems.[17]\n\n\nThe term NoSQL was used by Carlo Strozzi in 1998 to name his lightweight Strozzi NoSQL open-source relational database that did not expose the standard Structured Query Language (SQL) interface, but was still relational.[18] His NoSQL RDBMS is distinct from the around-2009 general concept of NoSQL databases.  Strozzi suggests that, because the current NoSQL movement \"departs from the relational model altogether, it should therefore have been called more appropriately 'NoREL'\",[19] referring to \"not relational\".\nJohan Oskarsson, then a developer at Last.fm, reintroduced the term NoSQL in early 2009 when he organized an event to discuss \"open-source distributed, non-relational databases\".[20] The name attempted to label the emergence of an increasing number of non-relational, distributed data stores, including open source clones of Google's Bigtable/MapReduce and Amazon's DynamoDB.\n\n\nThere are various ways to classify NoSQL databases, with different categories and subcategories, some of which overlap. What follows is a non-exhaustive classification by data model, with examples:[21]\n\n\n\n\nType\nNotable examples of this type\n\n\nKey\u2013value cache\nApache Ignite, Couchbase, Coherence, eXtreme Scale, Hazelcast, Infinispan, Memcached, Redis, Velocity\n\n\nKey\u2013value store\nAzure Cosmos DB, ArangoDB, Amazon DynamoDB, Aerospike, Couchbase, ScyllaDB\n\n\nKey\u2013value store (eventually consistent)\nAzure Cosmos DB, Oracle NoSQL Database, Riak, Voldemort\n\n\nKey\u2013value store (ordered)\nFoundationDB, InfinityDB, LMDB, MemcacheDB\n\n\nTuple store\nApache River, GigaSpaces, Tarantool, TIBCO ActiveSpaces, OpenLink Virtuoso\n\n\nTriplestore\n\nAllegroGraph, MarkLogic, Ontotext-OWLIM, Oracle NoSQL database, Profium Sense, Virtuoso Universal Server\n\n\nObject database\nObjectivity/DB, Perst, ZODB, db4o, GemStone/S, InterSystems Cach\u00e9, JADE, ObjectDatabase++, ObjectDB, ObjectStore, ODABA, Realm, OpenLink Virtuoso, Versant Object Database, Indexed Database API\n\n\nDocument store\nAzure Cosmos DB, ArangoDB, BaseX, Clusterpoint, Couchbase, CouchDB, DocumentDB, eXist-db, Google Cloud Firestore, IBM Domino, MarkLogic, MongoDB, RavenDB, Qizx, RethinkDB, Elasticsearch, OrientDB\n\n\nWide-column store\nAzure Cosmos DB, Amazon DynamoDB, Bigtable, Cassandra, Google Cloud Datastore, HBase, Hypertable, ScyllaDB\n\n\nNative multi-model database\nArangoDB, Azure Cosmos DB, OrientDB, MarkLogic, Apache Ignite,[22][23] Couchbase, FoundationDB, Oracle Database, AgensGraph\n\n\nGraph database\n\nAzure Cosmos DB, AllegroGraph, ArangoDB, Apache Giraph, GUN (Graph Universe Node), InfiniteGraph,  MarkLogic, Neo4J, OrientDB, Virtuoso\n\n\nMultivalue database\n\nD3 Pick database, Extensible Storage Engine (ESE/NT), InfinityDB, InterSystems Cach\u00e9, jBASE Pick database, mvBase Rocket Software, mvEnterprise Rocket Software, Northgate Information Solutions Reality (the original Pick/MV Database), OpenQM, Revelation Software's OpenInsight (Windows) and Advanced Revelation (DOS), UniData Rocket U2, UniVerse Rocket U2\n\n\n\nKey\u2013value (KV) stores use the associative array (also called a map or dictionary) as their fundamental data model. In this model, data is represented as a collection of key\u2013value pairs, such that each possible key appears at most once in the collection.[24][25]\nThe key\u2013value model is one of the simplest non-trivial data models, and richer data models are often implemented as an extension of it. The key\u2013value model can be extended to a discretely ordered model that maintains keys in lexicographic order. This extension is computationally powerful, in that it can efficiently retrieve selective key ranges.[26]\nKey\u2013value stores can use consistency models ranging from eventual consistency to serializability. Some databases support ordering of keys. There are various hardware implementations, and some users store data in memory (RAM), while others on solid-state drives (SSD) or rotating disks (aka hard disk drive (HDD)).\n\n\n\nThe central concept of a document store is that of a \"document\". While the details of this definition differ among document-oriented databases, they all assume that documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include XML, YAML, and JSON and binary forms like BSON. Documents are addressed in the database via a unique key that represents that document. Another defining characteristic of a document-oriented database is an API or query language to retrieve documents based on their contents.\nDifferent implementations offer different ways of organizing and/or grouping documents:\n\nCollections\nTags\nNon-visible metadata\nDirectory hierarchies\nCompared to relational databases, collections could be considered analogous to tables and documents analogous to records. But they are different \u2013 every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different.\n\n\n\nGraph databases are designed for data whose relations are well represented as a graph consisting of elements connected by a finite number of relations. Examples of data include social relations, public transport links, road maps, network topologies, etc.\n\nGraph databases and their query language\n\n\nName\nLanguage(s)\nNotes\n\n\nAgensGraph\nCypher\nMulti-model graph database\n\n\nAllegroGraph\nSPARQL\nRDF triple store\n\n\nAmazon Neptune\nGremlin, SPARQL\nGraph database\n\n\nArangoDB\nAQL, JavaScript, GraphQL\nMulti-model DBMS Document, Graph database and Key-value store\n\n\nAzure Cosmos DB\nGremlin\nGraph database\n\n\nDEX/Sparksee\nC++, Java, C#, Python\nGraph database\n\n\nFlockDB\nScala\nGraph database\n\n\nGUN (Graph Universe Node)\nJavaScript\nGraph database\n\n\nIBM Db2\nSPARQL\nRDF triple store added in DB2 10\n\n\nInfiniteGraph\nJava\nGraph database\n\n\nJanusGraph\nJava\nGraph database\n\n\nMarkLogic\nJava, JavaScript, SPARQL, XQuery\nMulti-model document database and RDF triple store\n\n\nNeo4j\nCypher\nGraph database\n\n\nOpenLink Virtuoso\nC++, C#, Java, SPARQL\nMiddleware and database engine hybrid\n\n\nOracle\nSPARQL 1.1\nRDF triple store added in 11g\n\n\nOrientDB\nJava, SQL\nMulti-model document and graph database\n\n\nOWLIM\nJava, SPARQL 1.1\nRDF triple store\n\n\nProfium Sense\nJava, SPARQL\nRDF triple store\n\n\nRedisGraph\nCypher\nGraph database\n\n\nSqrrl Enterprise\nJava\nGraph database\n\n\nTerminusDB\n\nJavaScript, Python, datalog\n\nOpen source RDF triple-store and document store[27]\n\n\nThe performance of NoSQL databases is usually evaluated using the metric of throughput, which is measured as operations per second. Performance evaluation must pay attention to the right benchmarks such as production configurations, parameters of the databases, anticipated data volume, and concurrent user workloads.\nBen Scofield rated different categories of NoSQL databases as follows:[28]\n\n\n\nData model\nPerformance\nScalability\nFlexibility\nComplexity\nData integrity\nFunctionality\n\n\nKey\u2013value store\nhigh\nhigh\nhigh\nnone\nlow\nvariable (none)\n\n\nColumn-oriented store\nhigh\nhigh\nmoderate\nlow\nlow\nminimal\n\n\nDocument-oriented store\nhigh\nvariable (high)\nhigh\nlow\nlow\nvariable (low)\n\n\nGraph database\nvariable\nvariable\nhigh\nhigh\nlow-med\ngraph theory\n\n\nRelational database\nvariable\nvariable\nlow\nmoderate\nhigh\nrelational algebra\n\nPerformance and scalability comparisons are most commonly done using the YCSB benchmark.\n\nHandling relational data[edit]\nSince most NoSQL databases lack ability for joins in queries, the database schema generally needs to be designed differently. There are three main techniques for handling relational data in a NoSQL database. (See table join and ACID support for NoSQL databases that support joins.)\n\n\nInstead of retrieving all the data with one query, it is common to do several queries to get the desired data. NoSQL queries are often faster than traditional SQL queries, so the cost of additional queries may be acceptable. If an excessive number of queries would be necessary, one of the other two approaches is more appropriate.\n\nCaching, replication and non-normalized data[edit]\nInstead of only storing foreign keys, it is common to store actual foreign values along with the model's data. For example, each blog comment might include the username in addition to a user id, thus providing easy access to the username without requiring another lookup. When a username changes, however, this will now need to be changed in many places in the database. Thus this approach works better when reads are much more common than writes.[29]\n\n\nWith document databases like MongoDB it is common to put more data in a smaller number of collections. For example, in a blogging application, one might choose to store comments within the blog post document, so that with a single retrieval one gets all the comments. Thus in this approach a single document contains all the data needed for a specific task.\n\nACID and join support[edit]\nA database is marked as supporting ACID properties (atomicity, consistency, isolation, durability) or join operations if the documentation for the database makes that claim. However, this doesn't necessarily mean that the capability is fully supported in a manner similar to most SQL databases.\n\n\n\nDatabase\nACID\nJoins\n\n\nAerospike\nYes\nNo\n\n\nAgensGraph\nYes\nYes\n\n\nApache Ignite\nYes\nYes\n\n\nArangoDB\nYes\nYes\n\n\nAmazon DynamoDB\nYes\nNo\n\n\nCouchbase\nYes\nYes\n\n\nCouchDB\nYes\nYes\n\n\nIBM Db2\nYes\nYes\n\n\nInfinityDB\nYes\nNo\n\n\nLMDB\nYes\nNo\n\n\nMarkLogic\nYes\nYes[nb 1]\n\n\nMongoDB\nYes\nYes[nb 2]\n\n\nOrientDB\nYes\nYes[nb 3]\n\n\n^ Joins do not necessarily apply to document databases, but MarkLogic can do joins using semantics.[30]\n\n^ MongoDB did not support joining from a sharded collection until version 5.1.[31]\n\n^ OrientDB can resolve 1:1 joins using links by storing direct links to foreign records.[32]\n\n\nQuery optimization and indexing in NoSQL databases[edit]\nDifferent NoSQL databases, such as DynamoDB, MongoDB, Cassandra, Couchbase, HBase, and Redis, exhibit varying behaviors when querying non-indexed fields. Many perform full-table or collection scans for such queries, applying filtering operations after retrieving data. However, modern NoSQL databases often incorporate advanced features to optimize query performance. For example, MongoDB supports compound indexes and query-optimization strategies, Cassandra offers secondary indexes and materialized views, and Redis employs custom indexing mechanisms tailored to specific use cases. Systems like Elasticsearch use inverted indexes for efficient text-based searches, but they can still require full scans for non-indexed fields. This behavior reflects the design focus of many NoSQL systems on scalability and efficient key-based operations rather than optimized querying for arbitrary fields. Consequently, while these databases excel at basic CRUD operations and key-based lookups, their suitability for complex queries involving joins or non-indexed filtering varies depending on the database type\u2014document, key\u2013value, wide-column, or graph\u2014and the specific implementation. [33]\n\n\nCAP theorem\nComparison of object database management systems\nComparison of structured storage software\nDatabase scalability\nDistributed cache\nFaceted search\nMultiValue database\nMulti-model database\nSchema-agnostic databases\nTriplestore\nVector database\n\n\n\n^ http://nosql-database.org/ \"NoSQL DEFINITION: Next Generation Databases mostly addressing some of the points\u00a0: being non-relational, distributed, open-source and horizontally scalable\".\n\n^ \"What Is a NoSQL Database? | IBM\". www.ibm.com. 12 December 2022. Retrieved 9 August 2024.\n\n^ \"NoSQL (Not Only SQL)\". NoSQL database, also called Not Only SQL\n\n^ Fowler, Martin. \"NosqlDefinition\". many advocates of NoSQL say that it does not mean a \"no\" to SQL, rather it means Not Only SQL\n\n^ Mohan, C. (2013). History Repeats Itself: Sensible and NonsenSQL Aspects of the NoSQL Hoopla (PDF). Proc. 16th Int'l Conf. on Extending Database Technology.\n\n^ \"Amazon Goes Back to the Future With 'NoSQL' Database\". WIRED. 19 January 2012. Retrieved 6 March 2017.\n\n^ Leavitt, Neal (2010). \"Will NoSQL Databases Live Up to Their Promise?\" (PDF). IEEE Computer. 43 (2): 12\u201314. doi:10.1109/MC.2010.58. S2CID\u00a026876882.\n\n^ \"RDBMS dominate the database market, but NoSQL systems are catching up\". DB-Engines.com. 21 November 2013. Retrieved 24 November 2013.\n\n^ Vogels, Werner (18 January 2012). \"Amazon DynamoDB \u2013 a Fast and Scalable NoSQL Database Service Designed for Internet Scale Applications\". All Things Distributed. Retrieved 6 March 2017.\n\n^ \"Jepsen: MongoDB stale reads\". Aphyr.com. 20 April 2015. Retrieved 6 March 2017.\n\n^ \"MongoDB ACID Transactions\". GeeksforGeeks. 12 March 2024. Retrieved 25 October 2024.\n\n^ Grolinger, K.; Higashino, W. A.; Tiwari, A.; Capretz, M. A. M. (2013). \"Data management in cloud environments: NoSQL and NewSQL data stores\" (PDF). Aira, Springer. Retrieved 8 January 2014.\n\n^ \"Large volume data analysis on the Typesafe Reactive Platform\". Slideshare.net. 11 June 2015. Retrieved 6 March 2017.\n\n^ Fowler, Adam. \"10 NoSQL Misconceptions\". Dummies.com. Retrieved 6 March 2017.\n\n^ \"No! to SQL and No! to NoSQL\". Iggyfernandez.wordpress.com. 29 July 2013. Retrieved 6 March 2017.\n\n^ Chapple, Mike. \"The ACID Model\". about.com. Archived from the original on 29 December 2016. Retrieved 26 September 2012.\n\n^ Lawrence, Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB (2014). \"Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB\". International Conference on Computational Science and Computational Intelligence 1.\n\n^ Lith, Adam; Mattson, Jakob (2010). \"Investigating storage solutions for large data: A comparison of well performing and scalable data storage solutions for real time extraction and batch insertion of data\" (PDF). G\u00f6teborg: Department of Computer Science and Engineering, Chalmers University of Technology. p.\u00a070. Retrieved 12 May 2011. Carlo Strozzi first used the term NoSQL in 1998 as a name for his open source relational database that did not offer a SQL interface[...]\n\n^ \"NoSQL Relational Database Management System: Home Page\". Strozzi.it. 2 October 2007. Retrieved 29 March 2010.\n\n^ \"NoSQL 2009\". Blog.sym-link.com. 12 May 2009. Archived from the original on 16 July 2011. Retrieved 29 March 2010.\n\n^ Strauch, Christof. \"NoSQL Databases\" (PDF). pp.\u00a023\u201324. Retrieved 27 August 2017.\n\n^ https://apacheignite.readme.io/docs Ignite Documentation\n\n^ https://www.infoworld.com/article/3135070/data-center/fire-up-big-data-processing-with-apache-ignite.html fire-up-big-data-processing-with-apache-ignite\n\n^ Sandy (14 January 2011). \"Key Value stores and the NoSQL movement\". Stackexchange. Retrieved 1 January 2012. Key\u2013value stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered the value in the \"key\u2013value\" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the key-value store. This structure replaces the need for a fixed data model and allows proper formatting.\n\n^ Seeger, Marc (21 September 2009). \"Key-Value Stores: a practical overview\" (PDF). Marc Seeger. Retrieved 1 January 2012. Key\u2013value stores provide a high-performance alternative to relational database systems with respect to storing and accessing data. This paper provides a short overview of some of the currently available key\u2013value stores and their interface to the Ruby programming language.\n\n^ Katsov, Ilya (1 March 2012). \"NoSQL Data Modeling Techniques\". Ilya Katsov. Retrieved 8 May 2014.\n\n^ \"TerminusDB an open-source in-memory document graph database\". terminusdb.com. Retrieved 16 December 2021.\n\n^ Scofield, Ben (14 January 2010). \"NoSQL - Death to Relational Databases(?)\". Retrieved 26 June 2014.\n\n^ \n\"Moving From Relational to NoSQL: How to Get Started\". Couchbase.com. Retrieved 11 November 2019.\n\n^ \"Can't do joins with MarkLogic? It's just a matter of Semantics! - General Networks\". Gennet.com. Archived from the original on 3 March 2017. Retrieved 6 March 2017.\n\n^ \"Sharded Collection Restrictions\". docs.mongodb.com. Retrieved 24 January 2020.\n\n^ \"SQL Reference \u00b7 OrientDB Manual\". OrientDB.com. Retrieved 24 January 2020.\n\n^ Sullivan, Dan. NoSQL for Mere Mortals. ISBN\u00a0978-0134023212.\n\n\n\nSadalage, Pramod; Fowler, Martin (2012). NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley. ISBN\u00a0978-0-321-82662-6.\nMcCreary, Dan; Kelly, Ann (2013). Making Sense of NoSQL: A guide for managers and the rest of us. Manning. ISBN\u00a09781617291074.\nWiese, Lena (2015). Advanced Data Management for SQL, NoSQL, Cloud and Distributed Databases. DeGruyter/Oldenbourg. ISBN\u00a0978-3-11-044140-6.\nStrauch, Christof (2012). \"NoSQL Databases\" (PDF).\nMoniruzzaman, A. B.; Hossain, S. A. (2013). \"NoSQL Database: New Era of Databases for Big data Analytics - Classification, Characteristics and Comparison\". arXiv:1307.0191 [cs.DB].\nOrend, Kai (2013). \"Analysis and Classification of NoSQL Databases and Evaluation of their Ability to Replace an Object-relational Persistence Layer\". CiteSeerX\u00a010.1.1.184.483.\nKrishnan, Ganesh; Kulkarni, Sarang; Dadbhawala, Dharmesh Kirit. \"Method and system for versioned sharing, consolidating and reporting information\".\n\nStrauch, Christof. \"NoSQL whitepaper\" (PDF). Stuttgart: Hochschule der Medien.\nEdlich, Stefan. \"NoSQL database List\".\nNeubauer, Peter (2010). \"Graph Databases, NOSQL and Neo4j\".\nBushik, Sergey (2012). \"A vendor-independent comparison of NoSQL databases: Cassandra, HBase, MongoDB, Riak\". NetworkWorld.\nZicari, Roberto V. (2014). \"NoSQL Data Stores \u2013 Articles, Papers, Presentations\". odbms.org."
  },
  {
    "id": "ml-ext-chunk-1",
    "index": 1,
    "title": "NoSQL",
    "url": "https://en.wikipedia.org/wiki/NoSQL#ml-ext-chunk-1",
    "text": "\"Structured storage\" redirects here. For the Microsoft technology, see COM Structured Storage.\nNoSQL (originally meaning \"Not only SQL\" or \"non-relational\")[1] refers to a type of database design that stores and retrieves data differently from the traditional table-based structure of relational databases. Unlike relational databases, which organize data into rows and columns like a spreadsheet, NoSQL databases use a single data structure\u2014such as key\u2013value pairs, wide columns, graphs, or documents\u2014to hold information. Since this non-relational design does not require a fixed schema, it scales easily to manage large, often unstructured datasets.[2] NoSQL systems are sometimes called \"Not only SQL\" because they can support SQL-like query languages or work alongside SQL databases in polyglot-persistent setups, where multiple database types are combined.[3][4] Non-relational databases date back to the late 1960s, but the term \"NoSQL\" emerged in the early 2000s, spurred by the needs of Web 2.0 companies like social media platforms.[5][6]\nNoSQL databases are popular in big data and real-time web applications due to their simple design, ability to scale across clusters of machines (called horizontal scaling), and precise control over data availability.[7][8] These structures can speed up certain tasks and are often considered more adaptable than fixed database tables.[9] However, many NoSQL systems prioritize speed and availability over strict consistency (per the CAP theorem), using eventual consistency\u2014where updates reach all nodes eventually, typically within milliseconds, but may cause brief delays in accessing the latest data, known as stale reads.[10] While most lack full ACID transaction support, some, like MongoDB, include it as a key feature.[11]\n\n\nBarriers to adoption[edit]\nBarriers to wider NoSQL adoption include their use of low-level query languages instead of SQL, inability to perform ad hoc joins across tables, lack of standardized interfaces, and significant investments already made in relational databases.[12] Some NoSQL systems risk losing data through lost writes or other forms, though features like write-ahead logging\u2014a method to record changes before they\u2019re applied\u2014can help prevent this.[13][14] For distributed transaction processing across multiple databases, keeping data consistent is a challenge for both NoSQL and relational systems, as relational databases cannot enforce rules linking separate databases, and few systems support both ACID transactions and X/Open XA standards for managing distributed updates.[15][16] Limitations within the interface environment are overcome using semantic virtualization protocols, such that NoSQL services are accessible to most operating systems.[17]\n\n\nThe term NoSQL was used by Carlo Strozzi in 1998 to name his lightweight Strozzi NoSQL open-source relational database that did not expose the standard Structured Query Language (SQL) interface, but was still relational.[18] His NoSQL RDBMS is distinct from the around-2009 general concept of NoSQL databases.  Strozzi suggests that, because the current NoSQL movement \"departs from the relational model altogether, it should therefore have been called more appropriately 'NoREL'\",[19] referring to \"not relational\".\nJohan Oskarsson, then a developer at Last.fm, reintroduced the term NoSQL in early 2009 when he organized an event to discuss \"open-source distributed, non-relational databases\".[20] The name attempted to label the emergence of an increasing number of non-relational, distributed data stores, including open source clones of Google's Bigtable/MapReduce and Amazon's DynamoDB.\n\n\nThere are various ways to classify NoSQL databases, with different categories and subcategories, some of which overlap. What follows is a non-exhaustive classification by data model, with examples:[21]\n\n\n\n\nType\nNotable examples of this type\n\n\nKey\u2013value cache\nApache Ignite, Couchbase, Coherence, eXtreme Scale, Hazelcast, Infinispan, Memcached, Redis, Velocity\n\n\nKey\u2013value store\nAzure Cosmos DB, ArangoDB, Amazon DynamoDB, Aerospike, Couchbase, ScyllaDB\n\n\nKey\u2013value store (eventually consistent)\nAzure Cosmos DB, Oracle NoSQL Database, Riak, Voldemort\n\n\nKey\u2013value store (ordered)\nFoundationDB, InfinityDB, LMDB, MemcacheDB\n\n\nTuple store\nApache River, GigaSpaces, Tarantool, TIBCO ActiveSpaces, OpenLink Virtuoso\n\n\nTriplestore\n\nAllegroGraph, MarkLogic, Ontotext-OWLIM, Oracle NoSQL database, Profium Sense, Virtuoso Universal Server\n\n\nObject database\nObjectivity/DB, Perst, ZODB, db4o, GemStone/S, InterSystems Cach\u00e9, JADE, ObjectDatabase++, ObjectDB, ObjectStore, ODABA, Realm, OpenLink Virtuoso, Versant Object Database, Indexed Database API\n\n\nDocument store\nAzure Cosmos DB, ArangoDB, BaseX, Clusterpoint, Couchbase, CouchDB, DocumentDB, eXist-db, Google Cloud Firestore, IBM Domino, MarkLogic, MongoDB, RavenDB, Qizx, RethinkDB, Elasticsearch, OrientDB\n\n\nWide-column store\nAzure Cosmos DB, Amazon DynamoDB, Bigtable, Cassandra, Google Cloud Datastore, HBase, Hypertable, ScyllaDB\n\n\nNative multi-model database\nArangoDB, Azure Cosmos DB, OrientDB, MarkLogic, Apache Ignite,[22][23] Couchbase, FoundationDB, Oracle Database, AgensGraph\n\n\nGraph database\n\nAzure Cosmos DB, AllegroGraph, ArangoDB, Apache Giraph, GUN (Graph Universe Node), InfiniteGraph,  MarkLogic, Neo4J, OrientDB, Virtuoso\n\n\nMultivalue database\n\nD3 Pick database, Extensible Storage Engine (ESE/NT), InfinityDB, InterSystems Cach\u00e9, jBASE Pick database, mvBase Rocket Software, mvEnterprise Rocket Software, Northgate Information Solutions Reality (the original Pick/MV Database), OpenQM, Revelation Software's OpenInsight (Windows) and Advanced Revelation (DOS), UniData Rocket U2, UniVerse Rocket U2\n\n\n\nKey\u2013value (KV) stores use the associative array (also called a map or dictionary) as their fundamental data model. In this model, data is represented as a collection of key\u2013value pairs, such that each possible key appears at most once in the collection.[24][25]\nThe key\u2013value model is one of the simplest non-trivial data models, and richer data models are often implemented as an extension of it. The key\u2013value model can be extended to a discretely ordered model that maintains keys in lexicographic order. This extension is computationally powerful, in that it can efficiently retrieve selective key ranges.[26]\nKey\u2013value stores can use consistency models ranging from eventual consistency to serializability. Some databases support ordering of keys. There are various hardware implementations, and some users store data in memory (RAM), while others on solid-state drives (SSD) or rotating disks (aka hard disk drive (HDD)).\n\n\n\nThe central concept of a document store is that of a \"document\". While the details of this definition differ among document-oriented databases, they all assume that documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include XML, YAML, and JSON and binary forms like BSON. Documents are addressed in the database via a unique key that represents that document. Another defining characteristic of a document-oriented database is an API or query language to retrieve documents based on their contents.\nDifferent implementations offer different ways of organizing and/or grouping documents:\n\nCollections\nTags\nNon-visible metadata\nDirectory hierarchies\nCompared to relational databases, collections could be considered analogous to tables and documents analogous to records. But they are different \u2013 every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different.\n\n\n\nGraph databases are designed for data whose relations are well represented as a graph consisting of elements connected by a finite number of relations. Examples of data include social relations, public transport links, road maps, network topologies, etc.\n\nGraph databases and their query language\n\n\nName\nLanguage(s)\nNotes\n\n\nAgensGraph\nCypher\nMulti-model graph database\n\n\nAllegroGraph\nSPARQL\nRDF triple store\n\n\nAmazon Neptune\nGremlin, SPARQL\nGraph database\n\n\nArangoDB\nAQL, JavaScript, GraphQL\nMulti-model DBMS Document, Graph database and Key-value store\n\n\nAzure Cosmos DB\nGremlin\nGraph database\n\n\nDEX/Sparksee\nC++, Java, C#, Python\nGraph database\n\n\nFlockDB\nScala\nGraph database\n\n\nGUN (Graph Universe Node)\nJavaScript\nGraph database\n\n\nIBM Db2\nSPARQL\nRDF triple store added in DB2 10\n\n\nInfiniteGraph\nJava\nGraph database\n\n\nJanusGraph\nJava\nGraph database\n\n\nMarkLogic\nJava, JavaScript, SPARQL, XQuery\nMulti-model document database and RDF triple store\n\n\nNeo4j\nCypher\nGraph database\n\n\nOpenLink Virtuoso\nC++, C#, Java, SPARQL\nMiddleware and database engine hybrid\n\n\nOracle\nSPARQL 1.1\nRDF triple store added in 11g\n\n\nOrientDB\nJava, SQL\nMulti-model document and graph database\n\n\nOWLIM\nJava, SPARQL 1.1\nRDF triple store\n\n\nProfium Sense\nJava, SPARQL\nRDF triple store\n\n\nRedisGraph\nCypher\nGraph database\n\n\nSqrrl Enterprise\nJava\nGraph database\n\n\nTerminusDB\n\nJavaScript, Python, datalog\n\nOpen source RDF triple-store and document store[27]\n\n\nThe performance of NoSQL databases is usually evaluated using the metric of throughput, which is measured as operations per second. Performance evaluation must pay attention to the right benchmarks such as production configurations, parameters of the databases, anticipated data volume, and concurrent user workloads.\nBen Scofield rated different categories of NoSQL databases as follows:[28]\n\n\n\nData model\nPerformance\nScalability\nFlexibility\nComplexity\nData integrity\nFunctionality\n\n\nKey\u2013value store\nhigh\nhigh\nhigh\nnone\nlow\nvariable (none)\n\n\nColumn-oriented store\nhigh\nhigh\nmoderate\nlow\nlow\nminimal\n\n\nDocument-oriented store\nhigh\nvariable (high)\nhigh\nlow\nlow\nvariable (low)\n\n\nGraph database\nvariable\nvariable\nhigh\nhigh\nlow-med\ngraph theory\n\n\nRelational database\nvariable\nvariable\nlow\nmoderate\nhigh\nrelational algebra\n\nPerformance and scalability comparisons are most commonly done using the YCSB benchmark.\n\nHandling relational data[edit]\nSince most NoSQL databases lack ability for joins in queries, the database schema generally needs to be designed differently. There are three main techniques for handling relational data in a NoSQL database. (See table join and ACID support for NoSQL databases that support joins.)\n\n\nInstead of retrieving all the data with one query, it is common to do several queries to get the desired data. NoSQL queries are often faster than traditional SQL queries, so the cost of additional queries may be acceptable. If an excessive number of queries would be necessary, one of the other two approaches is more appropriate.\n\nCaching, replication and non-normalized data[edit]\nInstead of only storing foreign keys, it is common to store actual foreign values along with the model's data. For example, each blog comment might include the username in addition to a user id, thus providing easy access to the username without requiring another lookup. When a username changes, however, this will now need to be changed in many places in the database. Thus this approach works better when reads are much more common than writes.[29]\n\n\nWith document databases like MongoDB it is common to put more data in a smaller number of collections. For example, in a blogging application, one might choose to store comments within the blog post document, so that with a single retrieval one gets all the comments. Thus in this approach a single document contains all the data needed for a specific task.\n\nACID and join support[edit]\nA database is marked as supporting ACID properties (atomicity, consistency, isolation, durability) or join operations if the documentation for the database makes that claim. However, this doesn't necessarily mean that the capability is fully supported in a manner similar to most SQL databases.\n\n\n\nDatabase\nACID\nJoins\n\n\nAerospike\nYes\nNo\n\n\nAgensGraph\nYes\nYes\n\n\nApache Ignite\nYes\nYes\n\n\nArangoDB\nYes\nYes\n\n\nAmazon DynamoDB\nYes\nNo\n\n\nCouchbase\nYes\nYes\n\n\nCouchDB\nYes\nYes\n\n\nIBM Db2\nYes\nYes\n\n\nInfinityDB\nYes\nNo\n\n\nLMDB\nYes\nNo\n\n\nMarkLogic\nYes\nYes[nb 1]\n\n\nMongoDB\nYes\nYes[nb 2]\n\n\nOrientDB\nYes\nYes[nb 3]\n\n\n^ Joins do not necessarily apply to document databases, but MarkLogic can do joins using semantics.[30]\n\n^ MongoDB did not support joining from a sharded collection until version 5.1.[31]\n\n^ OrientDB can resolve 1:1 joins using links by storing direct links to foreign records.[32]\n\n\nQuery optimization and indexing in NoSQL databases[edit]\nDifferent NoSQL databases, such as DynamoDB, MongoDB, Cassandra, Couchbase, HBase, and Redis, exhibit varying behaviors when querying non-indexed fields. Many perform full-table or collection scans for such queries, applying filtering operations after retrieving data. However, modern NoSQL databases often incorporate advanced features to optimize query performance. For example, MongoDB supports compound indexes and query-optimization strategies, Cassandra offers secondary indexes and materialized views, and Redis employs custom indexing mechanisms tailored to specific use cases. Systems like Elasticsearch use inverted indexes for efficient text-based searches, but they can still require full scans for non-indexed fields. This behavior reflects the design focus of many NoSQL systems on scalability and efficient key-based operations rather than optimized querying for arbitrary fields. Consequently, while these databases excel at basic CRUD operations and key-based lookups, their suitability for complex queries involving joins or non-indexed filtering varies depending on the database type\u2014document, key\u2013value, wide-column, or graph\u2014and the specific implementation. [33]\n\n\nCAP theorem\nComparison of object database management systems\nComparison of structured storage software\nDatabase scalability\nDistributed cache\nFaceted search\nMultiValue database\nMulti-model database\nSchema-agnostic databases\nTriplestore\nVector database\n\n\n\n^ http://nosql-database.org/ \"NoSQL DEFINITION: Next Generation Databases mostly addressing some of the points\u00a0: being non-relational, distributed, open-source and horizontally scalable\".\n\n^ \"What Is a NoSQL Database? | IBM\". www.ibm.com. 12 December 2022. Retrieved 9 August 2024.\n\n^ \"NoSQL (Not Only SQL)\". NoSQL database, also called Not Only SQL\n\n^ Fowler, Martin. \"NosqlDefinition\". many advocates of NoSQL say that it does not mean a \"no\" to SQL, rather it means Not Only SQL\n\n^ Mohan, C. (2013). History Repeats Itself: Sensible and NonsenSQL Aspects of the NoSQL Hoopla (PDF). Proc. 16th Int'l Conf. on Extending Database Technology.\n\n^ \"Amazon Goes Back to the Future With 'NoSQL' Database\". WIRED. 19 January 2012. Retrieved 6 March 2017.\n\n^ Leavitt, Neal (2010). \"Will NoSQL Databases Live Up to Their Promise?\" (PDF). IEEE Computer. 43 (2): 12\u201314. doi:10.1109/MC.2010.58. S2CID\u00a026876882.\n\n^ \"RDBMS dominate the database market, but NoSQL systems are catching up\". DB-Engines.com. 21 November 2013. Retrieved 24 November 2013.\n\n^ Vogels, Werner (18 January 2012). \"Amazon DynamoDB \u2013 a Fast and Scalable NoSQL Database Service Designed for Internet Scale Applications\". All Things Distributed. Retrieved 6 March 2017.\n\n^ \"Jepsen: MongoDB stale reads\". Aphyr.com. 20 April 2015. Retrieved 6 March 2017.\n\n^ \"MongoDB ACID Transactions\". GeeksforGeeks. 12 March 2024. Retrieved 25 October 2024.\n\n^ Grolinger, K.; Higashino, W. A.; Tiwari, A.; Capretz, M. A. M. (2013). \"Data management in cloud environments: NoSQL and NewSQL data stores\" (PDF). Aira, Springer. Retrieved 8 January 2014.\n\n^ \"Large volume data analysis on the Typesafe Reactive Platform\". Slideshare.net. 11 June 2015. Retrieved 6 March 2017.\n\n^ Fowler, Adam. \"10 NoSQL Misconceptions\". Dummies.com. Retrieved 6 March 2017.\n\n^ \"No! to SQL and No! to NoSQL\". Iggyfernandez.wordpress.com. 29 July 2013. Retrieved 6 March 2017.\n\n^ Chapple, Mike. \"The ACID Model\". about.com. Archived from the original on 29 December 2016. Retrieved 26 September 2012.\n\n^ Lawrence, Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB (2014). \"Integration and virtualization of relational SQL and NoSQL systems including MySQL and MongoDB\". International Conference on Computational Science and Computational Intelligence 1.\n\n^ Lith, Adam; Mattson, Jakob (2010). \"Investigating storage solutions for large data: A comparison of well performing and scalable data storage solutions for real time extraction and batch insertion of data\" (PDF). G\u00f6teborg: Department of Computer Science and Engineering, Chalmers University of Technology. p.\u00a070. Retrieved 12 May 2011. Carlo Strozzi first used the term NoSQL in 1998 as a name for his open source relational database that did not offer a SQL interface[...]\n\n^ \"NoSQL Relational Database Management System: Home Page\". Strozzi.it. 2 October 2007. Retrieved 29 March 2010.\n\n^ \"NoSQL 2009\". Blog.sym-link.com. 12 May 2009. Archived from the original on 16 July 2011. Retrieved 29 March 2010.\n\n^ Strauch, Christof. \"NoSQL Databases\" (PDF). pp.\u00a023\u201324. Retrieved 27 August 2017.\n\n^ https://apacheignite.readme.io/docs Ignite Documentation\n\n^ https://www.infoworld.com/article/3135070/data-center/fire-up-big-data-processing-with-apache-ignite.html fire-up-big-data-processing-with-apache-ignite\n\n^ Sandy (14 January 2011). \"Key Value stores and the NoSQL movement\". Stackexchange. Retrieved 1 January 2012. Key\u2013value stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered the value in the \"key\u2013value\" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the key-value store. This structure replaces the need for a fixed data model and allows proper formatting.\n\n^ Seeger, Marc (21 September 2009). \"Key-Value Stores: a practical overview\" (PDF). Marc Seeger. Retrieved 1 January 2012. Key\u2013value stores provide a high-performance alternative to relational database systems with respect to storing and accessing data. This paper provides a short overview of some of the currently available key\u2013value stores and their interface to the Ruby programming language.\n\n^ Katsov, Ilya (1 March 2012). \"NoSQL Data Modeling Techniques\". Ilya Katsov. Retrieved 8 May 2014.\n\n^ \"TerminusDB an open-source in-memory document graph database\". terminusdb.com. Retrieved 16 December 2021.\n\n^ Scofield, Ben (14 January 2010). \"NoSQL - Death to Relational Databases(?)\". Retrieved 26 June 2014.\n\n^ \n\"Moving From Relational to NoSQL: How to Get Started\". Couchbase.com. Retrieved 11 November 2019.\n\n^ \"Can't do joins with MarkLogic? It's just a matter of Semantics! - General Networks\". Gennet.com. Archived from the original on 3 March 2017. Retrieved 6 March 2017.\n\n^ \"Sharded Collection Restrictions\". docs.mongodb.com. Retrieved 24 January 2020.\n\n^ \"SQL Reference \u00b7 OrientDB Manual\". OrientDB.com. Retrieved 24 January 2020.\n\n^ Sullivan, Dan. NoSQL for Mere Mortals. ISBN\u00a0978-0134023212.\n\n\n\nSadalage, Pramod; Fowler, Martin (2012). NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley. ISBN\u00a0978-0-321-82662-6.\nMcCreary, Dan; Kelly, Ann (2013). Making Sense of NoSQL: A guide for managers and the rest of us. Manning. ISBN\u00a09781617291074.\nWiese, Lena (2015). Advanced Data Management for SQL, NoSQL, Cloud and Distributed Databases. DeGruyter/Oldenbourg. ISBN\u00a0978-3-11-044140-6.\nStrauch, Christof (2012). \"NoSQL Databases\" (PDF).\nMoniruzzaman, A. B.; Hossain, S. A. (2013). \"NoSQL Database: New Era of Databases for Big data Analytics - Classification, Characteristics and Comparison\". arXiv:1307.0191 [cs.DB].\nOrend, Kai (2013). \"Analysis and Classification of NoSQL Databases and Evaluation of their Ability to Replace an Object-relational Persistence Layer\". CiteSeerX\u00a010.1.1.184.483.\nKrishnan, Ganesh; Kulkarni, Sarang; Dadbhawala, Dharmesh Kirit. \"Method and system for versioned sharing, consolidating and reporting information\".\n\nStrauch, Christof. \"NoSQL whitepaper\" (PDF). Stuttgart: Hochschule der Medien.\nEdlich, Stefan. \"NoSQL database List\".\nNeubauer, Peter (2010). \"Graph Databases, NOSQL and Neo4j\".\nBushik, Sergey (2012). \"A vendor-independent comparison of NoSQL databases: Cassandra, HBase, MongoDB, Riak\". NetworkWorld.\nZicari, Roberto V. (2014). \"NoSQL Data Stores \u2013 Articles, Papers, Presentations\". odbms.org."
  }
]